// --- L√ìGICA DO MAPA E DOS FAVORITOS ---

// Espera a p√°gina HTML carregar completamente antes de rodar QUALQUER script.
// Isto garante que todos os elementos (bot√µes, listas, etc.) j√° existam quando o c√≥digo tentar encontr√°-los.
document.addEventListener('DOMContentLoaded', function() {
    
    // --- PARTE 1: L√ìGICA DO MAPA MODAL (POP-UP) ---
    
    // Pega a refer√™ncia do elemento principal do modal (a janela pop-up inteira).
    const mapModalOverlay = document.querySelector('.map-modal-overlay');

    // S√ì EXECUTA O C√ìDIGO DO MAPA MODAL SE ELE EXISTIR NA P√ÅGINA.
    // Esta verifica√ß√£o de seguran√ßa impede que o script d√™ erro em p√°ginas que n√£o t√™m o mapa modal (como a index.html).
    if (mapModalOverlay) {
        // --- Configura√ß√µes do Mapa Padr√£o ---
        // Vari√°veis para guardar os links do mapa que abre ao clicar no √≠cone flutuante.
        const DEFAULT_EMBED_URL = "https://www.google.com/maps/d/u/0/embed?mid=1ik6C1K6StANmTeuBqgxgQaBfX-MMM8E&ehbc=2E312F&noprof=1";
        const DEFAULT_SHARE_URL = ""; // Vazio para que o bot√£o "Abrir no Google Maps" n√£o apare√ßa.
        const DEFAULT_TITLE = "Vis√£o Geral da Grande Vit√≥ria";

        // --- Seletores dos Elementos do Mapa ---
        // Guarda a refer√™ncia de cada parte interativa do mapa em uma vari√°vel para f√°cil acesso.
        const mapCloseBtn = document.querySelector('.map-close-btn');
        const mapIconToggle = document.querySelector('.map-icon-toggle');
        const iframe = mapModalOverlay.querySelector('iframe');
        const googleMapsButton = mapModalOverlay.querySelector('.map-button');
        const mapModalTitle = document.querySelector('#map-modal-title');

        // Fun√ß√µes reutiliz√°veis para mostrar e esconder o modal.
        function openMapModal() { mapModalOverlay.classList.add('is-visible'); }
        function closeMapModal() { mapModalOverlay.classList.remove('is-visible'); }

        // --- Eventos de Fechar o Modal ---
        mapCloseBtn.addEventListener('click', closeMapModal); // Fecha ao clicar no "X".
        mapModalOverlay.addEventListener('click', (event) => { if (event.target === mapModalOverlay) closeMapModal(); }); // Fecha ao clicar no fundo escuro.
        document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && mapModalOverlay.classList.contains('is-visible')) closeMapModal(); }); // Fecha ao pressionar a tecla "Esc".

        // --- Evento do √çcone Flutuante ---
        // Define o que acontece quando o √≠cone üó∫Ô∏è √© clicado.
        mapIconToggle.addEventListener('click', function() {
            iframe.src = DEFAULT_EMBED_URL;
            mapModalTitle.textContent = DEFAULT_TITLE;
            googleMapsButton.style.display = 'none'; // Sempre esconde o bot√£o para o mapa padr√£o.
            openMapModal();
        });

        // --- Evento dos Links de Localiza√ß√£o ---
        // Adiciona a funcionalidade de mapa din√¢mico para cada link "üìç Localiza√ß√£o".
        const locationLinks = document.querySelectorAll('.location-link');
        locationLinks.forEach(link => {
            link.addEventListener('click', function(event) {
                event.preventDefault(); // Impede que o link recarregue a p√°gina.
                // Pega os dados personalizados guardados no pr√≥prio link (href, data-embed-url, etc.).
                const shareUrl = this.getAttribute('href');
                const embedUrl = this.getAttribute('data-embed-url');
                const locationName = this.getAttribute('data-location-name');

                // Se o link tiver os dados necess√°rios...
                if (embedUrl && locationName) {
                    // ...atualiza o conte√∫do do modal com os dados do local clicado.
                    iframe.src = embedUrl;
                    mapModalTitle.textContent = "Mapa: " + locationName;
                    // Mostra ou esconde o bot√£o "Abrir no Google Maps" dependendo se o href est√° preenchido.
                    if (shareUrl) {
                        googleMapsButton.style.display = 'block';
                        googleMapsButton.href = shareUrl;
                    } else {
                        googleMapsButton.style.display = 'none';
                    }
                    openMapModal();
                }
            });
        });
    }

    // --- PARTE 2: L√ìGICA DO MAPA EXPANS√çVEL (GAVETA) ---
    
    // Encontra todos os bot√µes de gaveta na p√°gina (pode ser um ou v√°rios).
    const mapToggles = document.querySelectorAll('.map-toggle');
    // Para cada bot√£o de gaveta encontrado...
    mapToggles.forEach(toggle => {
        // ...adiciona a funcionalidade de clique.
        toggle.addEventListener('click', function() {
            // Encontra a gaveta "pai" mais pr√≥xima do bot√£o que foi clicado.
            const mapDrawer = this.closest('.map-drawer');
            // Adiciona ou remove a classe 'is-open' apenas naquela gaveta, fazendo-a abrir ou fechar.
            mapDrawer.classList.toggle('is-open');
        });
    });

    // --- PARTE 3: L√ìGICA DOS FAVORITOS ---

    // A "chave" ou "nome do arquivo" onde a lista de favoritos ser√° salva na mem√≥ria do navegador.
    const favoritesKey = 'turismoVitoriaFavorites';
    // Carrega a lista salva ou, se n√£o houver nada, come√ßa com uma lista vazia.
    let favorites = JSON.parse(localStorage.getItem(favoritesKey) || '[]');

    // --- Fun√ß√µes dos Favoritos ---

    // Fun√ß√£o que "pinta" os cora√ß√µes dos itens favoritados e atualiza a lista de favoritos.
    function updateFavoritesUI() {
        const allLocations = document.querySelectorAll('li[data-id]');
        allLocations.forEach(location => {
            // Adiciona/remove a classe .is-favorited dependendo se o ID do item est√° na lista de favoritos.
            location.classList.toggle('is-favorited', favorites.includes(location.getAttribute('data-id')));
        });
        displayFavoritesList(); // Chama a fun√ß√£o para atualizar a lista de favoritos vis√≠vel.
    }

    // Fun√ß√£o que salva a lista atual de favoritos na mem√≥ria do navegador.
    function saveFavorites() {
        localStorage.setItem(favoritesKey, JSON.stringify(favorites));
    }

// Fun√ß√£o que cria e exibe a lista de favoritos na se√ß√£o "Meus Favoritos"
// Fun√ß√£o que cria e exibe a lista de favoritos, agora AGRUPADA POR CIDADE
function displayFavoritesList() {
    const favoritesSection = document.querySelector('#favorites-section');
    const favoritesList = document.querySelector('#favorites-list');
    if (!favoritesSection || !favoritesList) return;

    favoritesList.innerHTML = ''; // Limpa a lista antes de recri√°-la

    // Pega TODOS os itens da lista principal do site, na ordem em que aparecem
    const allOriginalItems = document.querySelectorAll('main li[data-id]');
    
    // Filtra apenas os itens cujo ID est√° na nossa lista de 'favorites'
    const favoritedItems = Array.from(allOriginalItems).filter(item => {
        return favorites.includes(item.getAttribute('data-id'));
    });

    // Se, ap√≥s filtrar, n√£o sobrar nenhum item, mostra a mensagem de lista vazia
    if (favoritedItems.length === 0) {
        favoritesList.innerHTML = '<li class="empty-message">Voc√™ ainda n√£o favoritou nenhum local.</li>';
    } else {
        // --- NOVA L√ìGICA DE AGRUPAMENTO ---
        const favoritesByCity = {}; // Cria um objeto para agrupar os locais por cidade

        // Para cada item favoritado...
        favoritedItems.forEach(item => {
            // ...encontra o t√≠tulo <h3> da cidade mais pr√≥ximo acima dele no HTML
            const cityH3 = item.closest('ul').previousElementSibling;
            // Pega o nome da cidade (ex: "Vit√≥ria") ou define como "Outros" se n√£o encontrar
            const cityName = cityH3 ? cityH3.textContent : 'Outros';

            // Se a cidade ainda n√£o existe no nosso objeto, cria uma lista vazia para ela
            if (!favoritesByCity[cityName]) {
                favoritesByCity[cityName] = [];
            }

            // Adiciona o item (j√° clonado) √† lista da sua cidade correspondente
            favoritesByCity[cityName].push(item.cloneNode(true));
        });

        // --- Agora, "desenha" a lista agrupada na tela ---
        // Para cada cidade encontrada no nosso objeto...
        for (const city in favoritesByCity) {
            // ...cria um elemento <h3> para o t√≠tulo da cidade
            const cityTitle = document.createElement('h3');
            cityTitle.textContent = city;
            favoritesList.appendChild(cityTitle); // Adiciona o t√≠tulo √† lista

            // Adiciona cada item favoritado daquela cidade logo abaixo do t√≠tulo
            favoritesByCity[city].forEach(itemNode => {
                favoritesList.appendChild(itemNode);
});
        }
    }
}

// --- Eventos dos Favoritos (com Delega√ß√£o de Eventos) ---

// Adiciona um √∫nico "ouvinte" de clique na √°rea <main> do site.
document.querySelector('main').addEventListener('click', function(event) {
    // Verifica se o elemento que foi clicado √© um bot√£o de favorito.
    const favoriteBtn = event.target.closest('.favorite-btn');

    // Se o clique n√£o foi em um bot√£o de favorito, a fun√ß√£o para aqui.
    if (!favoriteBtn) {
        return;
    }

    // Se o clique foi em um bot√£o, a l√≥gica continua...
    const parentLi = favoriteBtn.closest('li');
    const locationId = parentLi.getAttribute('data-id');
    const index = favorites.indexOf(locationId);

    if (index > -1) {
        favorites.splice(index, 1); // Remove se j√° existe.
    } else {
        favorites.push(locationId); // Adiciona se n√£o existe.
    }
    
    saveFavorites();      // Salva a lista modificada.
    updateFavoritesUI();  // Atualiza a tela inteira para refletir a mudan√ßa.
});


// Adiciona o evento de clique para o bot√£o "Mostrar/Ocultar Meus Favoritos".
const toggleBtn = document.querySelector('#toggle-favorites-btn');
if (toggleBtn) {
    // (Esta parte continua igual √† que voc√™ j√° tem)
    toggleBtn.addEventListener('click', function() {
        const favoritesSection = document.querySelector('#favorites-section');
        const isVisible = favoritesSection.classList.toggle('is-visible');
        toggleBtn.textContent = isVisible ? 'Ocultar Meus Favoritos' : 'Mostrar Meus Favoritos';
        if (isVisible) {
            displayFavoritesList();
        }
    });
}
    
    // --- Inicia o Sistema de Favoritos na P√°gina ---
    // Esta fun√ß√£o √© chamada assim que o script carrega, para que os cora√ß√µes j√° apare√ßam pintados.
    updateFavoritesUI();
});
